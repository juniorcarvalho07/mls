#ifndef OFVERTEXSTARITERATOR_H#define OFVERTEXSTARITERATOR_H#include "ofMacros.h"#include "ofIterator.h"#include "ofList.h"#define SCELL typename ofVertexStarIterator<_Traits>::sCelltemplate <class _Traits> class ofVertexStarIterator : public ofIterator<typename _Traits::sCell,_Traits>{public:	typedef typename _Traits::sCell sCell;	typedef typename _Traits::sVertex sVertex;	typedef typename _Traits::sSing sSing;  ofVertexStarIterator();	~ofVertexStarIterator();	bool initialize(sVertex* init, bool cyclical = false);	bool finish();	bool notFinish();	void operator++();	sCell *operator->();	sCell *operator*();private:	sCell *atu;	int status;	// 0 - iterator sem posicao	// 1 - iterator em posicao normal	// 2 - iterator no limite inferior	// 3 - iterator no limite superior	sSing *s;	sVertex *v;	sCell *tempc, *inic;	bool circ;};template <class _Traits> ofVertexStarIterator<_Traits>::ofVertexStarIterator(){	v = NULL;	status = 0;	atu = NULL;	s = NULL;	inic = NULL;}template <class _Traits> ofVertexStarIterator<_Traits>::~ofVertexStarIterator(){}template <class _Traits> bool ofVertexStarIterator<_Traits>::initialize(sVertex* init, bool cyclical){	OF_ASSERT(init);	circ = cyclical;	v = init;	s = NULL;	atu = NULL;	status = 1;	inic = NULL;	++(*this);	return true;}template<class _Traits> void ofVertexStarIterator<_Traits>::operator++(){	if(status == 1)	{		if(atu)		{			OF_ASSERT( atu->getVertexIndex(v) >= 0);			tempc  = atu->getMate( (atu->getVertexIndex(v) + 1)%3 );			OF_ASSERT( atu->getVertexIndex(v) >= 0);			if(tempc)			{				if(tempc != inic)					atu = tempc;				else				{					atu = NULL;					status = 3;				}			}			else			{				if(s->getNext())				{					s = s->getNext();					atu = s->getCell();				}				else				{					if(circ)					{						s = v->getSing();						atu = s->getCell();					}					else					{						atu = NULL;						status = 3;					}				}			}		}		else		{			if(!s)			{				s = v->getSing();				atu = s->getCell();				inic = atu;			}		}	}}template<class _Traits> SCELL* ofVertexStarIterator<_Traits>::operator->(){	return atu;}template<class _Traits> SCELL* ofVertexStarIterator<_Traits>::operator*(){	return atu;}template<class _Traits> bool ofVertexStarIterator<_Traits>::finish(){	return ((status == 2)||(status == 3));}template<class _Traits> bool ofVertexStarIterator<_Traits>::notFinish(){	return ((status == 0)||(status == 1));}#undef SCELL#endif